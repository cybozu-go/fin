apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: mantle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mantle
    app.kubernetes.io/version: 0.5.0
    argocd.argoproj.io/instance: app-csa-argocd_mantle
    helm.sh/chart: mantle-0.3.1
  name: mantle-controller
  namespace: ceph-ssd
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: mantle
      app.kubernetes.io/name: mantle
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: mantle
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mantle
        app.kubernetes.io/version: 0.5.0
        helm.sh/chart: mantle-0.3.1
    spec:
      containers:
      - command: ["sleep", "infinity"]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_IMAGE
          value: ghcr.io/cybozu-go/mantle:0.5.0
        - name: STAKATER_MANTLE_PRIMARY_CERT_SECRET_SECRET
          value: b7c40552e2c9a3e46cea3ac65fe3a1880ec8e83e
        image: ghcr.io/cybozu-go/mantle:0.5.0
        imagePullPolicy: IfNotPresent
        name: mantle
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/ceph
          name: ceph-config
      - command:
        - /bin/bash
        - -c
        - |
          # Replicate the script from toolbox.sh inline so the ceph image
          # can be run directly, instead of requiring the rook toolbox
          CEPH_CONFIG="/etc/ceph/ceph.conf"
          MON_CONFIG="/etc/rook/mon-endpoints"
          KEYRING_FILE="/etc/ceph/keyring"

          # create a ceph config file in its default location so ceph/rados tools can be used
          # without specifying any arguments
          write_endpoints() {
            endpoints=$(cat ${MON_CONFIG})

            # filter out the mon names
            # external cluster can have numbers or hyphens in mon names, handling them in regex
            # shellcheck disable=SC2001
            mon_endpoints=$(echo "${endpoints}"| sed 's/[a-z0-9_-]\+=//g')

            DATE=$(date)
            echo "$DATE writing mon endpoints to ${CEPH_CONFIG}: ${endpoints}"
              cat <<EOF > ${CEPH_CONFIG}
          [global]
          mon_host = ${mon_endpoints}

          [client.admin]
          keyring = ${KEYRING_FILE}
          EOF
          }

          # watch the endpoints config file and update if the mon endpoints ever change
          watch_endpoints() {
            # get the timestamp for the target of the soft link
            real_path=$(realpath ${MON_CONFIG})
            initial_time=$(stat -c %Z "${real_path}")
            while true; do
              real_path=$(realpath ${MON_CONFIG})
              latest_time=$(stat -c %Z "${real_path}")

              if [[ "${latest_time}" != "${initial_time}" ]]; then
                write_endpoints
                initial_time=${latest_time}
              fi

              sleep 10
            done
          }

          # read the secret from an env var (for backward compatibility), or from the secret file
          ceph_secret=${ROOK_CEPH_SECRET}
          if [[ "$ceph_secret" == "" ]]; then
            ceph_secret=$(cat /var/lib/rook-ceph-mon/secret.keyring)
          fi

          # create the keyring file
          cat <<EOF > ${KEYRING_FILE}
          [${ROOK_CEPH_USERNAME}]
          key = ${ceph_secret}
          EOF

          # write the initial config file
          write_endpoints

          # continuously update the mon endpoints if they fail over
          watch_endpoints
        env:
        - name: ROOK_CEPH_USERNAME
          valueFrom:
            secretKeyRef:
              key: ceph-username
              name: rook-ceph-mon
        - name: STAKATER_ROOK_CEPH_MON_ENDPOINTS_CONFIGMAP
          value: e35219989d97f62dca2de51da36cbfe47f795815
        image: ghcr.io/cybozu/ceph:18.2.4.2
        imagePullPolicy: IfNotPresent
        name: toolbox
        resources: {}
        securityContext:
          runAsGroup: 2016
          runAsNonRoot: true
          runAsUser: 2016
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/ceph
          name: ceph-config
        - mountPath: /etc/rook
          name: mon-endpoint-volume
        - mountPath: /var/lib/rook-ceph-mon
          name: ceph-admin-secret
          readOnly: true
      dnsPolicy: ClusterFirstWithHostNet
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
      terminationGracePeriodSeconds: 10
      volumes:
      - name: ceph-admin-secret
        secret:
          defaultMode: 420
          items:
          - key: ceph-secret
            path: secret.keyring
          optional: false
          secretName: rook-ceph-mon
      - configMap:
          defaultMode: 420
          items:
          - key: data
            path: mon-endpoints
          name: rook-ceph-mon-endpoints
        name: mon-endpoint-volume
      - emptyDir: {}
        name: ceph-config
